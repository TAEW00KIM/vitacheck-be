# 워크플로우의 이름을 지정합니다. GitHub 'Actions' 탭에 이 이름이 표시됩니다.
name: VitaCheck Backend CI

# 이 워크플로우가 언제 실행될지를 정의하는 '트리거' 설정입니다.
on:
  push:
    branches: [ develop ]  # develop 브랜치에 push 될 때
  pull_request:
    branches: [ develop ]  # develop 브랜치로 Pull Request가 생성/수정될 때

# 실제 수행할 작업(Job)들을 정의합니다.
jobs:
  # 'build'라는 이름의 작업을 정의합니다.
  build:
    # 이 작업을 실행할 가상 머신의 종류를 선택합니다. 'ubuntu-latest'가 가장 일반적입니다.
    runs-on: ubuntu-latest

    # 작업 내에서 수행될 단계(Step)들을 순서대로 나열합니다.
    steps:
      # 1. 소스 코드 체크아웃
      #    GitHub 저장소의 코드를 가상 머신으로 내려받는 단계입니다. 이게 있어야 우리 프로젝트 파일에 접근할 수 있습니다.
      - name: Checkout Source Code
        uses: actions/checkout@v4

      # 2. JDK 17 설치
      #    우리 프로젝트는 Java 17을 사용하므로, 가상 머신에 해당 버전의 Java를 설치합니다.
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle 캐싱
      #    매번 빌드할 때마다 의존성을 새로 다운로드하면 시간이 오래 걸립니다.
      #    한 번 받은 의존성을 캐시에 저장해두고 다음 빌드부터 재사용하여 속도를 높입니다.
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. gradlew 실행 권한 부여
      #    Linux 환경인 가상 머신에서 gradlew 스크립트를 실행할 수 있도록 권한을 줍니다.
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 5. Gradle로 빌드 및 테스트 실행
      #    프로젝트를 빌드합니다. './gradlew build' 명령어는 컴파일과 테스트 실행을 모두 포함합니다.
      #    이 단계가 실패하면 CI 전체가 실패 처리됩니다.
      - name: Build with Gradle
        run: ./gradlew build